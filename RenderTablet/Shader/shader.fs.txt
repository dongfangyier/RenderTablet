#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

// Material, read from file
in vec4 Ambient;
in vec4 Diffuse;
in vec4 Specular;
in vec4 FragPosLightSpace;

uniform sampler2D texture_diffuse1;

// Light
in vec3 Normal;
in vec3 FragPos;
struct Light{
	vec3 color;
	vec3 position;
	// vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform Light light;
uniform vec3 viewPos;
uniform float shininess;

uniform sampler2D shadowMap;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(vec3(Normal));
    vec3 lightDir = normalize(normalize(light.position) - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

void main()
{    
	// no textures
	//Ambient = texture(texture_diffuse1, TexCoords);

	vec3 _lightDir = normalize(light.position - FragPos);
	float _diffuse = max(dot(Normal, _lightDir), 0.0);

	vec3 _viewDir = normalize(viewPos - FragPos);
	vec3 _reflectDir = normalize(reflect(-_lightDir, Normal));
	float _specular = pow(max(dot(_reflectDir, _viewDir), 0.0), shininess);

	// blinn-phong
	// vec3 _viewDir = normalize(viewPos - FragPos);
	// vec3 _halfwayDir = normalize(_lightDir + _viewDir);  
    // float _specular = pow(max(dot(Normal, _halfwayDir), 0.0), shininess);


    //FragColor = texture(texture_diffuse1, TexCoords) + Diffuse;
	//FragColor = vec4((light.ambient * Ambient.xyz + _diffuse * light.diffuse * Diffuse.xyz + _specular * light.specular * Specular.xyz) * light.color, 1.0);

	float _shadow = ShadowCalculation(FragPosLightSpace);
	vec3 lighting = (light.ambient* Ambient.xyz + (1.0 - _shadow) * (_diffuse*light.diffuse * Diffuse.xyz + _specular*light.specular * Specular.xyz)) * light.color;    
	FragColor = vec4(lighting, 1.0);
}